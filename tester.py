# Imports
from parameters import *
from keras.models import load_model
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
import numpy as np

# Loads the saved model
model = load_model('{}{}'.format(path_models, NAME))

# Creates a new data set that the model will be tested with
x_test, y_test = make_blobs(n_samples = n_testing_samples, 
	n_features = n_features, 
	centers = n_classes, 
	cluster_std = cluster_std, 
	random_state = seed)

# Gets the predictions of the model on the test set
predictions = model.predict(x_test)
# Takes the position of the largest output prediction value for each sample (gets the predicted class)
predictions = [predictions[i,:].argmax() for i in range(int(predictions.shape[0]))]


# Measures the accuracy of the predictions
n_correct = 0
for i in range(n_testing_samples):
	if (predictions[i] == y_test[i]):
		n_correct += 1
accuracy = n_correct / n_testing_samples
print("Accuracy = {}%".format(str(accuracy * 100.0)))

# scatterplot of the predictions generated by the neural network
plt.scatter(x_test[:, 0], x_test[:, 1], c = predictions, cmap = 'coolwarm')
plt.draw()
plt.savefig('{}{}'.format(path_plots, 'prediction_set.png'))

# scatterplot of the actual test data
plt.scatter(x_test[:, 0], x_test[:, 1], c = y_test, cmap = 'coolwarm')
plt.draw()
plt.savefig('{}{}'.format(path_plots, 'test_set.png'))
print("Plots saved, done executing tester.py")